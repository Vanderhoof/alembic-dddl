from datetime import datetime
from pathlib import Path
from textwrap import dedent
from unittest.mock import mock_open, patch

from alembic_dddl import DDL
from alembic_dddl.src.file_format import TimestampedFileFormat
from alembic_dddl.src.renderer import (
    DDLRenderer,
    RevisionedScript,
    RevisionedScriptRenderer,
    SQLRenderer,
)

DDL_DIR = Path(__file__).parent / "ddl"


def test_revisioned_script_renderer(rev_script: RevisionedScript) -> None:
    renderer = RevisionedScriptRenderer(script=rev_script)
    expected = "op.run_ddl_script('2023_10_06_1522_sample_ddl_4b550063ade3.sql')"

    assert renderer.render() == expected


class TestSQLRenderer:
    @staticmethod
    def test_render_oneline() -> None:
        sql = "DROP VIEW purchases;"
        expected = "op.execute('DROP VIEW purchases;')"
        renderer = SQLRenderer(sql=sql)
        assert renderer.render() == expected

    @staticmethod
    def test_render_multiline() -> None:
        sql = dedent(
            """\
            DROP VIEW IF EXISTS
                purchases;
        """
        )
        expected = "op.execute('''DROP VIEW IF EXISTS\n    purchases;''')"
        renderer = SQLRenderer(sql=sql)
        assert renderer.render() == expected

    @staticmethod
    def test_multiple_statements() -> None:
        sql = dedent(
            """\
        UPDATE orders SET updated = now() WHERE status = 'autogenerated';
        DROP VIEW autogenerated_orders;
        """
        )
        expected = (
            "op.execute('UPDATE orders SET updated = now() WHERE status = \\'autogenerated\\';')\n"
            "op.execute('DROP VIEW autogenerated_orders;')"
        )
        renderer = SQLRenderer(sql=sql)
        assert renderer.render() == expected


class TestDDLRenderer:
    @staticmethod
    def test_init_timestamps(sample_ddl1: DDL) -> None:
        renderer = DDLRenderer(
            ddl=sample_ddl1,
            scripts_location=str(DDL_DIR),
            revision_id="abcdef123",
            time=datetime(2023, 1, 1, 12, 15),
            use_timestamps=True,
        )

        assert renderer.file_formatter == TimestampedFileFormat

    @staticmethod
    def test_render_with_date(sample_ddl1: DDL) -> None:
        renderer = DDLRenderer(
            ddl=sample_ddl1,
            scripts_location=str(DDL_DIR),
            revision_id="abcdef123",
            time=datetime(2023, 1, 1, 12, 15),
            use_timestamps=False,
        )

        expected_filename = "2023_01_01_1215_sample_ddl1_abcdef123.sql"
        expected_filepath = str(DDL_DIR / expected_filename)
        expected_result = f"op.run_ddl_script('{expected_filename}')"

        with patch("alembic_dddl.src.renderer.ensure_dir") as mock_ensure_dir:
            with patch("alembic_dddl.src.renderer.open", mock_open()) as mopen:
                result = renderer.render()
                assert mock_ensure_dir.called is True
                mopen.assert_called_once_with(expected_filepath, "w")

        assert result == expected_result

    @staticmethod
    def test_render_with_timestamp(sample_ddl1: DDL) -> None:
        renderer = DDLRenderer(
            ddl=sample_ddl1,
            scripts_location=str(DDL_DIR),
            revision_id="abcdef123",
            time=datetime(2023, 1, 1, 12, 15),
            use_timestamps=True,
        )

        expected_filename = "1672571700_sample_ddl1_abcdef123.sql"
        expected_filepath = str(DDL_DIR / expected_filename)
        expected_result = f"op.run_ddl_script('{expected_filename}')"

        with patch("alembic_dddl.src.renderer.ensure_dir") as mock_ensure_dir:
            with patch("alembic_dddl.src.renderer.open", mock_open()) as mopen:
                result = renderer.render()
                assert mock_ensure_dir.called is True
                mopen.assert_called_once_with(expected_filepath, "w")

        assert result == expected_result
