from textwrap import dedent

import pytest

from alembic_dddl import RevisionedScript, RevisionedScriptRenderer, SQLRenderer


@pytest.fixture
def rev_script() -> RevisionedScript:
    return RevisionedScript(
        filepath="/path/to/2023_10_06_1522_sample_ddl_4b550063ade3.sql",
        name="sample_ddl",
        revision="4b550063ade3",
    )


def test_revisioned_script_renderer(rev_script: RevisionedScript) -> None:
    renderer = RevisionedScriptRenderer(script=rev_script)
    expected = "op.run_ddl_script('2023_10_06_1522_sample_ddl_4b550063ade3.sql')"

    assert renderer.render() == expected


class TestSQLRenderer:
    @staticmethod
    def test_render_oneline() -> None:
        sql = "DROP VIEW purchases;"
        expected = "op.execute('DROP VIEW purchases;')"
        renderer = SQLRenderer(sql=sql)
        assert renderer.render() == expected

    @staticmethod
    def test_render_multiline() -> None:
        sql = dedent(
            """\
            DROP VIEW IF EXISTS
                purchases;
        """
        )
        expected = "op.execute('''DROP VIEW IF EXISTS\n    purchases;''')"
        renderer = SQLRenderer(sql=sql)
        assert renderer.render() == expected

    @staticmethod
    def test_multiple_statements() -> None:
        sql = dedent(
            """\
        UPDATE orders SET updated = now() WHERE status = 'autogenerated';
        DROP VIEW autogenerated_orders;
        """
        )
        expected = (
            "op.execute('UPDATE orders SET updated = now() WHERE status = \\'autogenerated\\';')\n"
            "op.execute('DROP VIEW autogenerated_orders;')")
        renderer = SQLRenderer(sql=sql)
        assert renderer.render() == expected
